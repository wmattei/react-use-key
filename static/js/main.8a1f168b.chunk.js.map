{"version":3,"sources":["logo.svg","../../src/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","_defaultConfig","_specialKeys","key","handler","config","memoHandler","useCallback","internalHandler","e","find","o","combination","requireCtrl","requireShift","requireAlt","Object","regularKeys","document","App","useKey","newText","ctrlKey","altKey","shiftKey","setText","useState","text","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,+VCErCC,EAAiB,C,UAAA,I,YAAA,I,cAAA,M,gBAAA,E,UAKR,WAGTC,EAAe,C,KAAA,O,MAAA,Q,IAGZ,O,MAqBM,SAAgBC,EAAKC,EAASC,G,OACzC,EAAkCA,GAAlC,I,IACMC,EAAcC,sBAApB,GAEMC,EAAkB,SAAAC,GACJN,uCAGLE,EAHX,aAIsBK,MAAK,SAAAC,G,IACjBC,EAAcD,EAAEA,MAAMN,EAA5B,WACMQ,EAAcD,EAAYA,SAASV,EAAzC,MACMY,EAAeF,EAAYA,SAASV,EAA1C,OACMa,EAAaH,EAAYA,SAASV,EAAxC,K,OAEA,EAhCD,oCAGK,SAAAS,G,OAAMK,OAAOA,OAAOA,GAAcA,SAAlCL,MA+BYM,SAASR,EAAEJ,EAAFI,eAArBQ,gBACAJ,IAAgBJ,EADhBQ,SAEAH,IAAiBL,EAFjBQ,UAGAF,IAAeN,EAJnB,YAUAJ,EAAJ,gB,EACI,iB,EAEJ,K,qBAGM,W,gBACN,iBAA0BA,EAA1B,aACO,W,OAAMa,SAASA,oBAAoBb,EAA7Ba,UAAN,MACR,CAACZ,EAHJ,KCrCWa,MAxBf,WASIC,EAAO,UARgB,SAACX,GACpB,IAAIY,EAAO,uBAAmBZ,EAAEN,IAArB,MACPM,EAAEa,UAASD,GAAW,eACtBZ,EAAEc,SAAQF,GAAW,cACrBZ,EAAEe,WAAUH,GAAW,gBAC3BI,EAAQJ,KAGqB,MATtB,MAWaK,mBAAS,IAXtB,mBAWJC,EAXI,KAWEF,EAXF,KAaX,OACI,yBAAKG,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,0BAAMH,UAAU,YAAYD,MCXxBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASsB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a1f168b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useCallback, useEffect } from 'react';\n\nconst _defaultConfig = {\n    separator: '+',\n    orSeparator: '|',\n    matchStrategy: 'key', // key || code\n    preventDefault: false,\n    eventType: 'keydown'\n};\n\nconst _specialKeys = {\n    CTRL: 'CTRL',\n    SHIFT: 'SHIFT',\n    ALT: 'ALT'\n};\n\nfunction _extractRegularKeys(string) {\n    return string\n        .replace(/ /g, '')\n        .split('+')\n        .filter(o => !Object.values(_specialKeys).includes(o));\n}\n\n/**\n *\n * @param {String} key\n * @param {Function} handler\n * @param {Object} config - Hook config object\n * @param {String} [config.separator] - Keys separator\n * @param {String} [config.orSeparator] - Or separator\n * @param {String} [config.matchStrategy] - Strategy for matching gived string. Default: key\n * @param {String} [config.preventDefault] - Should it prevent the default key behaviour\n * @param {String} [config.eventType] - Event type. Default: keydown\n */\nexport default function useKey(key, handler, config) {\n    config = { ..._defaultConfig, ...(config || {}) };\n    const memoHandler = useCallback(handler);\n\n    const internalHandler = e => {\n        const options = key\n            .replace(/ /g, '')\n            .toUpperCase()\n            .split(config.orSeparator);\n        const match = options.find(o => {\n            const combination = o.split(config.separator);\n            const requireCtrl = combination.includes(_specialKeys.CTRL);\n            const requireShift = combination.includes(_specialKeys.SHIFT);\n            const requireAlt = combination.includes(_specialKeys.ALT);\n\n            const regularKeys = _extractRegularKeys(o);\n            return (\n                regularKeys.includes(e[config.matchStrategy].toUpperCase()) &&\n                requireCtrl === e.ctrlKey &&\n                requireShift === e.shiftKey &&\n                requireAlt === e.altKey\n            );\n        });\n        if (!match) {\n            return;\n        }\n        if (config.preventDefault) {\n            e.preventDefault();\n        }\n        memoHandler(e);\n    };\n\n    useEffect(() => {\n        document.addEventListener(config.eventType, internalHandler);\n        return () => document.removeEventListener(config.eventType, internalHandler);\n    }, [memoHandler, key]);\n}\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport useKey from 'react-use-key';\n\nfunction App() {\n    const changeDocument = (e) => {\n        let newText = `You pressed '${e.key}' `;\n        if (e.ctrlKey) newText += 'with CTRL, ';\n        if (e.altKey) newText += 'with ALT, ';\n        if (e.shiftKey) newText += 'with SHIFT, ';\n        setText(newText);\n    };\n\n    useKey('ctrl+d', changeDocument, null);\n\n    const [text, setText] = useState('');\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                \n                <span className=\"App-link\">{text}</span>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}